# MultiTalk V82 - Simplified build with xfuser fix
FROM pytorch/pytorch:2.1.2-cuda12.1-cudnn8-devel

# System dependencies
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
RUN apt-get update && apt-get install -y \
    git \
    ffmpeg \
    gcc \
    g++ \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Version info
ENV VERSION=82.0.0
ENV BUILD_ID=multitalk-v82-simple
ENV BUILD_TIME=2025-07-15T12:00:00Z
ENV PYTHONPATH=/app/multitalk_official:/app:/runpod-volume/models
ENV HF_HOME=/runpod-volume/huggingface
ENV TRANSFORMERS_CACHE=/runpod-volume/huggingface
ENV HF_DATASETS_CACHE=/runpod-volume/huggingface/datasets

WORKDIR /app

# Python dependencies
RUN pip install --no-cache-dir \
    runpod==1.7.3 \
    numpy==1.24.3 \
    scipy==1.10.1 \
    transformers==4.43.3 \
    tokenizers==0.19.1 \
    librosa==0.10.2 \
    soundfile==0.12.1 \
    diffusers>=0.31.0 \
    accelerate>=1.1.1 \
    safetensors>=0.4.3 \
    opencv-python>=4.9.0 \
    imageio>=2.30.0 \
    huggingface-hub==0.23.5 \
    einops \
    rotary-embedding-torch \
    tensorboardX \
    omegaconf \
    easydict \
    ftfy \
    timm \
    sentencepiece \
    peft \
    boto3 \
    moviepy \
    imageio-ffmpeg

# Clone and setup MultiTalk
RUN mkdir -p /app/multitalk_official && \
    cd /app/multitalk_official && \
    git clone https://github.com/MeiGen-AI/MultiTalk.git . && \
    cp -r wan /app/multitalk_official/ && \
    (cp generate_multitalk.py /app/multitalk_official/ || cp scripts/generate_multitalk.py /app/multitalk_official/ || true)

# Fix xfuser imports
RUN if [ -f /app/multitalk_official/wan/utils/multitalk_utils.py ]; then \
    sed -i 's/from xfuser\.core\.distributed import.*/# xfuser imports removed\ndef get_sequence_parallel_rank():\n    return 0\ndef get_sequence_parallel_world_size():\n    return 1/g' /app/multitalk_official/wan/utils/multitalk_utils.py; \
    fi

# Remove kokoro dependency
RUN if [ -f /app/multitalk_official/generate_multitalk.py ]; then \
    sed -i '/import kokoro/d' /app/multitalk_official/generate_multitalk.py; \
    sed -i '/from kokoro/d' /app/multitalk_official/generate_multitalk.py; \
    fi

# Create handler
RUN cat > /app/handler.py << 'EOF'
import runpod
import os
import json
import base64
import time
import subprocess
from pathlib import Path

def handler(job):
    job_input = job["input"]
    
    # Get input parameters
    action = job_input.get("action", "generate")
    audio_input = job_input.get("audio_1", "1.wav")
    condition_image = job_input.get("condition_image", "multi1.png")
    output_format = job_input.get("output_format", "s3")
    s3_output_key = job_input.get("s3_output_key", f"multitalk-out/output-{int(time.time())}.mp4")
    
    print(f"Processing request: action={action}, audio={audio_input}, image={condition_image}")
    
    # For now, return a placeholder response
    # TODO: Integrate actual MultiTalk generation
    
    result = {
        "status": "completed",
        "message": "MultiTalk V82 - Handler working, model integration pending",
        "output": {
            "video_url": f"s3://{os.environ.get('AWS_S3_BUCKET_NAME', 'bucket')}/{s3_output_key}",
            "metadata": {
                "version": "82.0.0",
                "audio_input": audio_input,
                "condition_image": condition_image
            }
        }
    }
    
    return result

if __name__ == "__main__":
    runpod.serverless.start({"handler": handler})
EOF

# Create runtime initialization script
RUN cat > /app/init_runtime.sh << 'EOF'
#!/bin/bash
echo "ðŸš€ Initializing runtime environment..."

# Ensure cache directories exist
mkdir -p /runpod-volume/huggingface/hub
mkdir -p /runpod-volume/huggingface/datasets
mkdir -p /runpod-volume/huggingface/modules
chmod -R 777 /runpod-volume/huggingface

echo "âœ… Runtime environment initialized"

# Start the handler
exec python -u /app/handler.py
EOF

RUN chmod +x /app/init_runtime.sh

# Validation
RUN python -c "import runpod; print('âœ… RunPod imports')" && \
    python -c "import scipy.stats; print('âœ… SciPy imports')" && \
    python -c "import torch; print('âœ… PyTorch imports')" && \
    python -c "import transformers; print('âœ… Transformers imports')" && \
    python -c "import diffusers; print('âœ… Diffusers imports')" && \
    echo "âœ… All critical imports successful!"

CMD ["/app/init_runtime.sh"]